{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["client_id","id","scopes","App","path","component","window","location","href","encodeURIComponent","Authorize","access_token","hash","substr","indexOf","split","to","pathname","state","token","Home","useLocation","useState","me","setMe","top","setTop","time","setTime","topType","setTopType","console","log","items","map","art","name","useEffect","fetch","headers","Authorization","then","resp","json","className","display_name","onChange","evt","target","value","obj","song","artist","Song","img","album","images","length","artists","join","src","url","height","width","Artist","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4e2d2c35.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useLocation\n} from \"react-router-dom\";\n\nimport keys from \"./keys.json\";\n\nconst client_id = keys.id;\nconst redirect_uri = \"http://localhost:3000/authorize\";\nvar scopes =\n  \"user-read-private user-read-email user-top-read user-read-recently-played user-follow-read\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route\n          path=\"/login\"\n          component={() => {\n            window.location.href =\n              \"https://accounts.spotify.com/authorize\" +\n              \"?response_type=token\" +\n              \"&client_id=\" +\n              client_id +\n              (scopes ? \"&scope=\" + encodeURIComponent(scopes) : \"\") +\n              \"&redirect_uri=\" +\n              encodeURIComponent(redirect_uri);\n            return null;\n          }}\n        />\n        <Route path=\"/authorize\">\n          <Authorize />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n\nconst Authorize = () => {\n  let access_token = window.location.hash\n    .substr(window.location.hash.indexOf(\"access_token\"))\n    .split(\"&\")[0]\n    .split(\"=\")[1];\n\n  return <Redirect to={{ pathname: \"/\", state: { token: access_token } }} />;\n};\n\nconst Home = () => {\n  const { token } = useLocation().state || \"\";\n\n  const [me, setMe] = useState({});\n  const [top, setTop] = useState({});\n  const [time, setTime] = useState(\"short_term\");\n  const [topType, setTopType] = useState(\"tracks\");\n\n  console.log(top.items && top.items.map(art => art.name));\n\n  useEffect(() => {\n    if (token) {\n      fetch(\"https://api.spotify.com/v1/me\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      })\n        .then(resp => resp.json())\n        .then(setMe);\n\n      setTop({});\n\n      fetch(\n        `https://api.spotify.com/v1/me/top/${topType}?time_range=${time}&limit=50`,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        }\n      )\n        .then(resp => resp.json())\n        .then(setTop);\n    }\n  }, [token, time, topType]);\n\n  const updateTimeFromForm = evt => setTop({}) || setTime(evt.target.value);\n  const updateTopTypeFromForm = evt =>\n    setTop({}) || setTopType(evt.target.value);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"TopBar\">\n          {me.display_name}\n\n          <select\n            id=\"topselect\"\n            onChange={updateTopTypeFromForm}\n            value={topType}\n          >\n            <option value=\"tracks\">Songs</option>\n            <option value=\"artists\">Artists</option>\n          </select>\n\n          <select id=\"timeselect\" onChange={updateTimeFromForm} value={time}>\n            <option value=\"short_term\">Short-term (4 weeks)</option>\n            <option value=\"medium_term\">Mid-term (6 months)</option>\n            <option value=\"long_term\">Long-term (all time)</option>\n          </select>\n        </div>\n        {top.items &&\n          top.items.map(obj =>\n            topType === \"tracks\" ? <Song song={obj} /> : <Artist artist={obj} />\n          )}\n        {!token ? (\n          <Link to=\"/login\">Login</Link>\n        ) : (\n          <Link to=\"/authorize\">Logout</Link>\n        )}\n      </header>\n    </div>\n  );\n};\n\nconst Song = ({ song }) => {\n  let img = song.album.images[song.album.images.length - 1];\n  let artist = song.artists.map(artist => artist.name).join(\", \");\n  return (\n    <div className=\"Song\">\n      <img src={img.url} height={img.height} width={img.width} />\n      <div className=\"SongDesc\">\n        <div className=\"SongName\">{song.name}</div>\n        <div className=\"SongArtist\">{artist}</div>\n      </div>\n    </div>\n  );\n};\n\nconst Artist = ({ artist }) => {\n  let img = artist.images[artist.images.length - 1];\n\n  return (\n    <div className=\"Song\">\n      {img && <img src={img.url} height={64} width={64} />}\n      <div className=\"SongDesc\">\n        <div className=\"SongName\">{artist.name}</div>\n      </div>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}